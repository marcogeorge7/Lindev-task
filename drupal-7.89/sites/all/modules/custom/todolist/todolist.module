<?php
/**
 * Implementation of hook_menu().
 */
function todolist_menu() {
  $items = array();

  $items['todolist/list'] = array(
    'title' => 'List All Tasks',
    'page callback' => 'todolist_listing_tasks',
    'access arguments' => array('access todolist'),
  );
  $items['todolist/create_task'] = array(
    'title' => 'Creat Task',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('todolist_create_task_form'),
    'access arguments' => array('access todolist'),
    'file' => 'create_task.inc',
  );
  $items['todolist/%/edit_task'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('todolist_edit_task_form'),
    'access arguments' => array('access todolist'),
    'file' => 'edit_task.inc',
  );
  $items['todolist/%/delete_task'] = array(
    'page callback' => 'todolist_delete_task',
    'page argument' => array(1),
    'access arguments' => array('access todolist'),
    'file' => 'delete_task.inc',
  );
  $items['todolist/%/close_tasks'] = array(
    'page callback' => 'todolist_close_tasks',
    'page argument' => array(1),
    'access arguments' => array('close tasks'),
  );
  $items['todolist/upload_tasks'] = array(
    'title' => 'Upload Tasks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('upload_tasks_form'),
    'access arguments' => array('access todolist'),
    'file' => 'upload_tasks.inc',
  );

  $items['todolist/export_tasks'] = array(
    'title' => 'Export Tasks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('export_tasks_form'),
    'access arguments' => array('access todolist'),
    'file' => 'export_tasks.inc',
  );

  return $items;
}


/**
* Implements hook_permission().
*/
function todolist_permission() {
  return array(
    'access todolist' => array(
    'title' => 'TodoList',
    'description' => 'Customizing the Todolist via the administration settings',
    ),
    'close tasks' => array(
      'title' => 'TodoList',
      'description' => 'Close Users Tasks',
    ),
    'manage todolist' => array(
      'title' => 'TodoList',
      'description' => 'Manage All Tasks And Reassign To Other Users',
    ),
    );
  }


/**
 * Implementation of ToDo Listing table.
 */

function todolist_listing_tasks() {
  global $user;

    $header = array(
    array('data' => 'ID', 'field' => 'tid', 'sort' => 'asc'),
    array('data' => 'Title', 'field' => 'task_title'),
    array('data' => 'Status', 'field' => 'status'),
    array('data' => 'Date', 'field' => 'task_date'),
    array('data' => 'Action'),
    );

    if (user_access('manage todolist'))
      array_splice( $header, 4, 0,array( array('data' => 'User', 'field' => 'user')) );

    $query = db_select('todolist_task', 'todo');
    $query->fields('todo', array('tid', 'task_title', 'status', 'task_date', 'uid'));

    if (!user_access('manage todolist')) $query->condition('uid', $user->uid, '=');

    $table_sort = $query->extend('TableSort') // Add table sort extender.
                  ->orderByHeader($header); // Add order by headers.
    $pager = $table_sort->extend('PagerDefault')
            ->limit(5);
    $result = $pager->execute();

    $rows = array();
    foreach($result as $res){
      $links_order = '';
      if(user_access('close tasks') && $res->status != 'closed')
          $links_order .= l('Close Task', 'todolist/'.$res->tid.'/close_tasks'). ' | ';
      if ($res->status != 'closed')
          $links_order .=  l('Edit', 'todolist/'.$res->tid.'/edit_task') .  " | ";

      $links_order .= l('Delete', 'todolist/'.$res->tid.'/delete_task');

      $data = array($res->tid, $res->task_title, $res->status, $res->task_date, $links_order );
      if (user_access('manage todolist'))
          array_splice( $data, 4, 0, array(user_load($res->uid)->name) );
      $rows[] = $data;
    }

    // If rows are not empty theme and display the rows.

    if (!empty($rows)) {
      $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'sort-table')));
      $output .= theme('pager');
      $output .= '<br>'.l('Upload Tasks', 'todolist/upload_tasks');
      $output .= '<br>'.l('Export All Tasks', 'todolist/export_tasks');
    }
    else {
      $output = "No results found.";
    }
    $output .= '<br>'.l('Add new record', 'todolist/create_task');

    return $output;
  }

/**
 * Implementation of hook_cron().
 */
function todolist_cron(){

    $query = db_select('todolist_task', 'todo')
    ->fields(('todo'))
    ->condition('todo.status', array('new', 'pending'), 'IN')
    ->execute()
    ->fetchAll();

    // make tasks group by uid
    $tasks = [];
    foreach ( $query as $value ) $tasks[$value->uid][] = $value;

    foreach ( $tasks as $uid => $user_task ) {
        $separated_tasks = implode(",", array_column($user_task, 'task_title'));
        $message = "You have not completed these tasks {$separated_tasks} yet, kindly complete it now";
        $params = array(
          'body' => $message,
          'subject' => 'ToDo Tasks',
          'headers' => 'simple',
        );
        $to = user_load($uid)->mail;

        drupal_mail('ToDo', 'send_link', $to, language_default(), $params, variable_get('site_mail'), TRUE);
      }

}

/**
 * Implements hook_block_info().
 */
function todolist_block_info() {
  $blocks = array();
  $blocks['todolist_hp'] = array(
    'info' => 'Todolist',
//    'status' => 1,
//    'region' => 'Content',
  );
 return $blocks;
}
/**
 * Implementation of hook_block_view()
 * Show Today Tasks
 */
function todolist_block_view($delta = '') {

    $block = array();

    switch($delta) {
        case 'todolist_hp':
            $block['subject'] = t('Todolist');
            $block['content'] = todolist_hp_callback();
            break;
    }

    return $block;
}

/**
 * Implementation of todolist_hp_callback()
 * Show Today Tasks
 *
 */

function todolist_hp_callback() {
  global $user;
  if(drupal_is_front_page()){
  $header = array(
    array('data' => 'ID', 'field' => 'tid', 'sort' => 'asc'),
    array('data' => 'Title', 'field' => 'task_title'),
    array('data' => 'Status', 'field' => 'status'),
    array('data' => 'Date', 'field' => 'task_date'),
    );

  if (user_access('manage todolist'))
      array_splice( $header, 4, 0,array( array('data' => 'User', 'field' => 'user')) );

    $query = db_select('todolist_task', 'todo');
    $query->fields('todo', array('tid', 'task_title', 'status', 'task_date', 'uid'));
    if (!user_access('manage todolist')) $query->condition('uid', $user->uid, '=');
    $query->range(0, 5);

    $table_sort = $query->extend('TableSort') // Add table sort extender.
                  ->orderByHeader($header); // Add order by headers.

    $result = $table_sort->execute();

    $rows = array();
    foreach($result as $res){
    $data = array($res->tid, $res->task_title, $res->status, $res->task_date );
    if (user_access('manage todolist'))
        array_splice( $data, 4, 0, array(user_load($res->uid)->name) );
    $rows[] = $data;
    }

    // If rows are not empty theme and display the rows.

    if (!empty($rows)) {
    $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'sort-table')));
    $output .= theme('pager');
    }
    else {
     $output = "No Tasks For Today.";
    }

    return $output;
  }
}

  /**
   * The user that has the role and permission for closing the users tasks
   */
  function todolist_close_tasks(){
    $id = arg(1);
    $data = array(
        'status' => 'closed',
    );
    db_update('todolist_task')
        ->fields($data)
        ->condition('tid', $id, '=')
        ->execute();
    drupal_set_message('Task has been closed!');
    drupal_goto('todolist/list');
  }
